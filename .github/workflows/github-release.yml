name: Build and Release

on:  push:    tags:      - 'v*.*.*' # Trigger on pushes to tags like v1.0.0, v1.0.1, etc.

jobs:  build-linux:    runs-on: ubuntu-latest    steps:      - name: Checkout code        uses: actions/checkout@v4

      - name: Set up Python        uses: actions/setup-python@v5        with:          python-version: '3.x'

      - name: Install dependencies        run: |          python -m pip install --upgrade pip          pip install -r requirements.txt pyinstaller fpm

      - name: Build Linux executable with PyInstaller        run: |          pyinstaller widget.py --name HElloApp --onefile          # PyInstaller output is in the 'dist' directory

      - name: Create tar.gz archive        run: |          tar -czvf HElloApp-linux-x64.tar.gz -C dist HElloApp          # The -C dist option changes directory to 'dist' before adding 'HElloApp'

      - name: Create .deb package        run: |          # fpm requires a directory structure for packaging.
          # We'll create a temporary directory and copy the executable into it.
          mkdir -p package_root/usr/local/bin          cp dist/HElloApp package_root/usr/local/bin/HElloApp          
          fpm -s dir -t deb -n HElloApp -v ${{ github.ref_name }} \            --description "A simple HElloApp application" \            --url "https://github.com/${{ github.repository }}" \            --license "MIT" \            -a amd64 \            -C package_root .

      - name: Create .rpm package        run: |          # Reuse the package_root from .deb creation          fpm -s dir -t rpm -n HElloApp -v ${{ github.ref_name }} \            --description "A simple HElloApp application" \            --url "https://github.com/${{ github.repository }}" \            --license "MIT" \            -a x86_64 \            -C package_root .

      - name: Upload Linux artifacts        uses: actions/upload-artifact@v4        with:          name: linux-build          path: |            HElloApp-linux-x64.tar.gz            HElloApp_*.deb            HElloApp-*.rpm

  build-windows:    runs-on: windows-latest    steps:      - name: Checkout code        uses: actions/checkout@v4

      - name: Set up Python        uses: actions/setup-python@v5        with:          python-version: '3.x'

      - name: Install dependencies        run: |          python -m pip install --upgrade pip          pip install -r requirements.txt pyinstaller

      - name: Build Windows executable with PyInstaller        run: |          pyinstaller widget.py --name HElloApp --onefile          # PyInstaller output is in the 'dist' directory

      - name: Upload Windows artifact        uses: actions/upload-artifact@v4        with:          name: windows-build          path: dist/HElloApp.exe

  release:    runs-on: ubuntu-latest    needs: [build-linux, build-windows] # This job depends on successful builds    if: startsWith(github.ref, 'refs/tags/') # Only run if triggered by a tag push    steps:      - name: Checkout code        uses: actions/checkout@v4

      - name: Download Linux artifacts        uses: actions/download-artifact@v4        with:          name: linux-build          path: artifacts/linux

      - name: Download Windows artifacts        uses: actions/download-artifact@v4        with:          name: windows-build          path: artifacts/windows

      - name: Create Release        id: create_release        uses: actions/create-release@v1        env:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        with:          tag_name: ${{ github.ref }}          release_name: Release ${{ github.ref }}          draft: false          prerelease: false

      - name: Upload Linux tar.gz asset        uses: actions/upload-release-asset@v1        env:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        with:          upload_url: ${{ steps.create_release.outputs.upload_url }}          asset_path: artifacts/linux/HElloApp-linux-x64.tar.gz          asset_name: HElloApp-linux-x64.tar.gz          asset_content_type: application/gzip

      - name: Upload Linux .deb asset        uses: actions/upload-release-asset@v1        env:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        with:          upload_url: ${{ steps.create_release.outputs.upload_url }}          asset_path: ${{ github.workspace }}/artifacts/linux/HElloApp_$(echo ${{ github.ref_name }} | sed 's/v//')_amd64.deb # Adjusting path for fpm output          asset_name: HElloApp-linux-amd64.deb          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Linux .rpm asset        uses: actions/upload-release-asset@v1        env:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        with:          upload_url: ${{ steps.create_release.outputs.upload_url }}          asset_path: ${{ github.workspace }}/artifacts/linux/HElloApp-$(echo ${{ github.ref_name }} | sed 's/v//')-1.x86_64.rpm # Adjusting path for fpm output          asset_name: HElloApp-linux-x86_64.rpm          asset_content_type: application/x-rpm

      - name: Upload Windows .exe asset        uses: actions/upload-release-asset@v1        env:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        with:          upload_url: ${{ steps.create_release.outputs.upload_url }}          asset_path: artifacts/windows/HElloApp.exe          asset_name: HElloApp-windows-x64.exe          asset_content_type: application/vnd.microsoft.portable-executable